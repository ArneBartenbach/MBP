/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.citopt.sensmonqtt.devicemanager;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import org.citopt.sensmonqtt.device.Device;
import org.citopt.sensmonqtt.device.DeviceID;

/**
 * This class is a stub
 * Accesses the list/table of all registered devices.
 * Implements necessary communication between the DeviceManager and the Devices'
 * table on database.
 * @author rafaelkperes
 */
public class DeviceManagerDatabaseConnector {
    
    Map<DeviceID, Device> devices;

    public DeviceManagerDatabaseConnector() {
        devices = new HashMap<>();
    }
    
    /**
     * 
     * @param id ID from desired Device
     * @return element with given unique ID
     * @throws NoSuchElementException if not found
     */
    public Device getDevice(DeviceID id) throws NoSuchElementException {
        Device d = devices.get(id);
        if (d != null) {
            return d;
        }
        
        throw new NoSuchElementException();
    }
    
    /**
     * 
     * @return Collection of registered Devices
     */
    public Collection<Device> getAllDevices() {
        return devices.values();
    }
    
    /**
     * Registers device with the given ID generated by the device.
     * @param device 
     * @throws IllegalArgumentException if device already exists
     */
    public void addDevice(Device device) {
        if (devices.get(device.getId()) != null) {
            throw new IllegalArgumentException("element already exists.");
        }
        devices.put(device.getId(), device);
    }
    
    /**
     * Updates already existent device.
     * @param device 
     * @throws IllegalArgumentException if device not found
     */
    public void updateDevice(Device device) {        
        if (devices.get(device.getId()) == null) {
            throw new IllegalArgumentException("element already exists.");
        }
        devices.put(device.getId(), device);
    }
    
    /**
     * Puts device without any checking, overriding the old one, if existent.
     * @param device 
     */
    public void putDevice(Device device) {
        devices.put(device.getId(), device);
    }
}
